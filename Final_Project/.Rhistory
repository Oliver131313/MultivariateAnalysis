fa.loads <- fa.loads  %>%
mutate(ML2 = abs(ML2),
ML1 = abs(ML1),
ML3 = abs(ML3))
fa.l.m <- reshape2::melt(
fa.loads,
id = "Variable",
measure = c("ML2", "ML1", "ML3"),
variable.name = "Factor",
value.name = "Loading"
)
fa.l.m <- fa.l.m %>% arrange(desc(Loading))
ggplot(fa.l.m, aes(Variable, abs(Loading), fill = Loading)) +
facet_wrap( ~ Factor, nrow = 1) + #place the factors in separate facets
geom_bar(stat = "identity") + #make the bars
coord_flip() + #flip the axes so the test names can be horizontal
#define the fill color gradient: blue=positive, red=negative
scale_fill_gradient2(
name = "Loading",
high = "blue",
mid = "white",
low = "red",
midpoint = 0,
guide = F
) +
ylab("Loading Strength") + #improve y-axis label
theme_bw(base_size = 10) #use a black-and0white theme with set font size
```
fa.loads <- as_tibble(unclass(fa$loadings))
fa.loads$Variable <- rownames(unclass(fa$loadings))
fa.loads <- fa.loads  %>%
mutate(ML2 = abs(ML2),
ML1 = abs(ML1),
ML3 = abs(ML3))
fa.l.m <- reshape2::melt(
fa.loads,
id = "Variable",
measure = c("ML2", "ML1", "ML3"),
variable.name = "Factor",
value.name = "Loading"
)
fa.l.m <- fa.l.m %>% arrange(desc(Loading))
ggplot(fa.l.m, aes(Variable, abs(Loading), fill = Loading)) +
facet_wrap( ~ Factor, nrow = 1) + #place the factors in separate facets
geom_bar(stat = "identity") + #make the bars
coord_flip() + #flip the axes so the test names can be horizontal
#define the fill color gradient: blue=positive, red=negative
scale_fill_gradient2(
name = "Loading",
high = "blue",
mid = "white",
low = "red",
midpoint = 0,
guide = F
) +
ylab("Loading Strength") + #improve y-axis label
theme_bw(base_size = 10) #use a black-and0white theme with set font size
fa.loads <- as_tibble(unclass(fa$loadings))
fa.loads$Variable <- rownames(unclass(fa$loadings))
fa.loads <- fa.loads  %>%
mutate(ML2 = abs(ML2),
ML1 = abs(ML1),
ML3 = abs(ML3))
fa.l.m <- reshape2::melt(
fa.loads,
id = "Variable",
measure = c("ML2", "ML1", "ML3"),
variable.name = "Factor",
value.name = "Loading"
)
fa.l.m <- fa.l.m %>% arrange(desc(Loading))
ggplot(fa.l.m, aes(Variable, abs(Loading), fill = Loading)) +
facet_wrap( ~ Factor, nrow = 1) + #place the factors in separate facets
geom_bar(stat = "identity") + #make the bars
coord_flip() + #flip the axes so the test names can be horizontal
#define the fill color gradient: blue=positive, red=negative
scale_fill_gradient2(
name = "Loading",
high = "blue",
mid = "white",
low = "red",
midpoint = 0,
guide = F
) +
ylab("Loading Strength") + #improve y-axis label
theme_bw(base_size = 10) #use a black-and0white theme with set font size
options(warn=1)
fa.loads <- as_tibble(unclass(fa$loadings))
fa.loads$Variable <- rownames(unclass(fa$loadings))
fa.loads <- fa.loads  %>%
mutate(ML2 = abs(ML2),
ML1 = abs(ML1),
ML3 = abs(ML3))
fa.l.m <- reshape2::melt(
fa.loads,
id = "Variable",
measure = c("ML2", "ML1", "ML3"),
variable.name = "Factor",
value.name = "Loading"
)
fa.l.m <- fa.l.m %>% arrange(desc(Loading))
ggplot(fa.l.m, aes(Variable, abs(Loading), fill = Loading)) +
facet_wrap( ~ Factor, nrow = 1) + #place the factors in separate facets
geom_bar(stat = "identity") + #make the bars
coord_flip() + #flip the axes so the test names can be horizontal
#define the fill color gradient: blue=positive, red=negative
scale_fill_gradient2(
name = "Loading",
high = "blue",
mid = "white",
low = "red",
midpoint = 0,
guide = F
) +
ylab("Loading Strength") + #improve y-axis label
theme_bw(base_size = 10) #use a black-and0white theme with set font size
```
fa.loads <- as_tibble(unclass(fa$loadings))
fa.loads$Variable <- rownames(unclass(fa$loadings))
fa.loads <- fa.loads  %>%
mutate(ML2 = abs(ML2),
ML1 = abs(ML1),
ML3 = abs(ML3))
fa.l.m <- reshape2::melt(
fa.loads,
id = "Variable",
measure = c("ML2", "ML1", "ML3"),
variable.name = "Factor",
value.name = "Loading"
)
fa.l.m <- fa.l.m %>% arrange(desc(Loading))
ggplot(fa.l.m, aes(Variable, abs(Loading), fill = Loading)) +
facet_wrap( ~ Factor, nrow = 1) + #place the factors in separate facets
geom_bar(stat = "identity") + #make the bars
coord_flip() + #flip the axes so the test names can be horizontal
#define the fill color gradient: blue=positive, red=negative
scale_fill_gradient2(
name = "Loading",
high = "blue",
mid = "white",
low = "red",
midpoint = 0,
guide = F
) +
ylab("Loading Strength") + #improve y-axis label
theme_bw(base_size = 10) #use a black-and0white theme with set font size
fa.loads <- as_tibble(unclass(fa$loadings))
fa.loads$Variable <- rownames(unclass(fa$loadings))
fa.loads <- fa.loads  %>%
mutate(ML2 = abs(ML2),
ML1 = abs(ML1),
ML3 = abs(ML3))
fa.l.m <- reshape2::melt(
fa.loads,
id = "Variable",
measure = c("ML2", "ML1", "ML3"),
variable.name = "Factor",
value.name = "Loading"
)
fa.l.m <- fa.l.m %>% arrange(desc(Loading))
ggplot(fa.l.m, aes(Variable, abs(Loading), fill = Loading)) +
facet_wrap( ~ Factor, nrow = 1) + #place the factors in separate facets
geom_bar(stat = "identity") + #make the bars
coord_flip() + #flip the axes so the test names can be horizontal
#define the fill color gradient: blue=positive, red=negative
scale_fill_gradient2(
name = "Loading",
high = "blue",
mid = "white",
low = "red",
midpoint = 0,
guide = F
) +
ylab("Loading Strength") + #improve y-axis label
theme_bw(base_size = 10) #use a black-and0white theme with set font size
corrplot(fa)
corrplot::corrplot(fa)
install.packages("corrplot")
corrplot::corrplot(fa)
corrplot::corrplot(fa$score.cor)
fa$score.cor
corrplot::corrplot(fa$score)
corrplot::corrplot(unclass(fa$score))
fa$score
fa$scores
corrplot::corrplot(fa$scores)
corrplot::corrplot(unclass(fa$scores))
fa$residual[1:37, 1:37]
fa$residual[1:37]
library(BSDA)
t.test(x=as.double(AUC_FA),y= as.double(AUC_RAW), paired=TRUE, alternative="greater")
library(BSDA)
t.test(x=as.double(AUC_FA),y= as.double(AUC_RAW), paired=TRUE, alternative="less")
library(BSDA)
t.test <- t.test(x=as.double(AUC_FA),y= as.double(AUC_RAW), paired=TRUE, alternative="less")
t.test$p.value
print(t.test)
t.test$data[1]
t.test$p.value
printr(t.test)
install.packages("printr")
printr::printr(t.test)
knit_print.trunc_mat(fa)
t.test
install.packages("tinytex")
tinytex::latexmk("H_0")
install.packages("latex2exp")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.doble(AUC_RAW)
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n")
TeX("H_0: \mu_fa - \mu_raw >= 0")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n")
TeX("H_0: \'mu_fa - \\mu_raw >= 0")
str_glue("H0: mu_1 - mu_2")
str_glue("Data: {t.test$data[1]\n")
t.test
t.test$conf.int
t.test$conf.int[1][1]
t.test$
s
t.test$estimate
t.test$estimate[2]
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n")
str_glue("Data: {t.test$data[1]\n")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n")
str_glue("Data: {t.test$data[1]}\n")
str_glue("\t t={t.test$t},\n\t df={t.test$df}, \n\t p-value ~= {t.test$p.value}\n")
str_glue("Confidence Interval (95%):\n\t ({t.test$conf.int[1][1], t.test$conf.int[1][2])\n")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n")
str_glue("Data: {t.test$data[1]}\n")
str_glue("\t t={t.test$t},\n\t df={t.test$df}, \n\t p-value ~= {t.test$p.value}\n")
str_glue("Confidence Interval (95%):\n\t ({t.test$conf.int[1][1], t.test$conf.int[1][2]})\n")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n")
str_glue("Data: {t.test$data[1]}\n")
str_glue("\t t={t.test$t},\n\t df={t.test$df}, \n\t p-value ~= {t.test$p.value}\n")
str_glue("Confidence Interval (95%):\n\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n")
str_glue("Estimated {t.test$estimate}")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n")
str_glue("Data: {t.test$data[1]}\n")
str_glue("\t t={t.test$t},\n\t df={t.test$df}, \n\t p-value ~= {t.test$p.value}\n")
str_glue("Confidence Interval (95%):\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n")
str_glue("\t t={t.test$t},\n\t df={t.test$df}, \n\t p-value ~= {t.test$p.value}\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("\t t={t.test$t},\n\t df={t.test$df}, \n\t p-value ~= {t.test$p.value}\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
str_glue("\t t={t.test$t},\n\t df={t.test$df}, \n\t p-value ~= {t.test$p.value}\n")
str_glue("\t t={t.test$t},\n\t df={t.test$df}, \n\t p-value ~= {t.test$p.value}\n")
t.test$parameter
t.test$statistic
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("\t t={t.test$statistic},\n\t df={t.test$parameter}, \n\t p-value ~= {t.test$p.value}\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("t = \t\t{t.test$statistic},\ndf = \t\t{t.test$parameter}, \np-value ~= \t\t{t.test$p.value}\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {t.test$p.value}\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {t.test$p.value}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
knitr::kable(t.test$p.value)
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
```{r, echo=FALSE, eval=TRUE}
rm(list = ls())
# Load libraries
library(tidyverse)
library(MASS)
library(psych)
library(ggbiplot)
# Import data
raw_data <- read_delim("FIFA22_official_data.csv")
rm(list = ls())
# Load libraries
library(tidyverse)
library(MASS)
library(psych)
library(ggbiplot)
# Import data
raw_data <- read_delim("FIFA22_official_data.csv")
length(unique(raw_data$`Best Position`))
data <- raw_data %>%
# Reduction of positions
dplyr::mutate(
BestPos = factor(
case_when(
`Best Position` %in% c("CF", "ST") ~ "CF/ST",
`Best Position`  %in% c("CAM", "CM", "CDM") ~ "CM/CAM/CDM",
`Best Position` %in% c("RW", "RM") ~ "RW/RM",
`Best Position` %in% c("LW", "LM") ~ "LW/RM",
`Best Position` %in% c("RWB", "RB") ~ "RWB/RB",
`Best Position` %in% c("LWB", "LB") ~ "LWB/LB",
`Best Position` %in% c("CB") ~ "CB",
`Best Position` %in% c("GK") ~ "GK"
)
),
Height = as.double(str_replace(Height, 'cm', '')),
Weight = as.double(str_replace(Weight, 'kg', '')),
PrefFoot = as.factor(`Preferred Foot`),
WeekFoot = `Weak Foot`,
SkillMoves = `Skill Moves`,
WorkRate = as.factor(`Work Rate`),
BodyType = factor(`Body Type`)
) %>%
# Picking only relevant columns
dplyr::select(
Name,
BestPos,
Age,
PrefFoot,
WeekFoot,
SkillMoves,
WorkRate,
BodyType,
Height,
Weight,
Crossing,
Finishing,
HeadingAccuracy,
ShortPassing,
Volleys,
Dribbling,
Curve,
FKAccuracy,
LongPassing,
BallControl,
Acceleration,
SprintSpeed,
Agility,
Reactions,
Stamina,
Interceptions,
Balance,
Strength,
Positioning,
ShotPower,
LongShots,
Vision,
StandingTackle,
Jumping,
Aggression,
Penalties,
SlidingTackle
)
fifa <- data %>%
filter(BestPos %in% c("CM/CAM/CDM", "CF/ST")) %>%
# Ponechame si vsak iba numericke stlpce
select_if(!(map(., class) %in% c("factor", "character")))
# Number of NA values
str_glue('{round(sum(is.na(fifa)) / dim(fifa)[1] * 100, 2)} %')
fifa <- fifa %>%
na.omit()
# Contorl check of missing values
sum(is.na(fifa))
# Fit PCA on standardized and centered data
fit <- prcomp(fifa, center = T, scale. = T)
# Show results
sum_pca <- summary(fit)
sum_pca
cum_var_pca <-
as.vector(sort(sum_pca$importance[2, 1:10], decreasing = TRUE))
plot(cum_var_pca, type = "l",
xlab = "Principal Components", ylab = "Proportion of Variance",)
axis(1, at=seq(1, 10), labels = as.character(seq(1, 10)))
title("Scree Plot")
# Biplot skrz ggplot
ggbiplot(
fit,
scale = 1,
circle = TRUE,
var.scale = 1,
var.axes = TRUE,
alpha = 0
)
fa <-
fa(
r = fifa,
nfactors = 3,
rotate = "varimax",
fm = "ml",
scores = "regression",
residuals = T
)
fa.diagram(fa.results = fa)
tinytex::install_tinytex()
